{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chart-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1"],"sources":["C:\\Users\\jabri\\Desktop\\expense-tracker2\\src\\components\\ChartComponent.vue"],"sourcesContent":["<template>\r\n    <div class=\"chart-container\"></div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { db, auth } from '@/firebase.js';\r\n  import * as d3 from 'd3';\r\n  \r\n  export default {\r\n    name: 'ChartComponent',\r\n    data() {\r\n      return {\r\n        incomePercentage: 0,\r\n        expensePercentage: 0,\r\n      }\r\n    },\r\n    created() {\r\n      this.fetchIncomeTotal();\r\n      this.fetchExpenseTotal();\r\n    },\r\n    methods: {\r\n      fetchIncomeTotal() {\r\n        const userId = auth.currentUser.uid;\r\n        db.collection(`users/${userId}/income`).get()\r\n          .then((querySnapshot) => {\r\n            let total = 0;\r\n            querySnapshot.forEach((doc) => {\r\n              total += doc.data().amount;\r\n            });\r\n            this.incomePercentage = total / (this.incomeTotal + this.expenseTotal) * 100;\r\n            this.createChart();\r\n          })\r\n          .catch((error) => {\r\n            console.error('Error fetching income total:', error);\r\n          });\r\n      },\r\n      fetchExpenseTotal() {\r\n        const userId = auth.currentUser.uid;\r\n        db.collection(`users/${userId}/expenses`).get()\r\n          .then((querySnapshot) => {\r\n            let total = 0;\r\n            querySnapshot.forEach((doc) => {\r\n              total += doc.data().amount;\r\n            });\r\n            this.expensePercentage = total / (this.incomeTotal + this.expenseTotal) * 100;\r\n            this.createChart();\r\n          })\r\n          .catch((error) => {\r\n            console.error('Error fetching expense total:', error);\r\n          });\r\n      },\r\n      createChart() {\r\n        const data = [\r\n          { label: 'Income', value: this.incomePercentage },\r\n          { label: 'Expense', value: this.expensePercentage },\r\n        ];\r\n  \r\n        const width = 300;\r\n        const height = 300;\r\n        const radius = Math.min(width, height) / 2;\r\n  \r\n        const svg = d3.select('.chart-container')\r\n          .append('svg')\r\n          .attr('width', width)\r\n          .attr('height', height)\r\n          .append('g')\r\n          .attr('transform', `translate(${width / 2}, ${height / 2})`);\r\n  \r\n        const color = d3.scaleOrdinal()\r\n          .domain(data.map(d => d.label))\r\n          .range(d3.schemeSet2);\r\n  \r\n        const pie = d3.pie()\r\n          .value(d => d.value);\r\n  \r\n        const data_ready = pie(data);\r\n  \r\n        svg.selectAll('whatever')\r\n          .data(data_ready)\r\n          .enter()\r\n          .append('path')\r\n          .attr('d', d3.arc()\r\n            .innerRadius(0)\r\n            .outerRadius(radius)\r\n          )\r\n          .attr('fill', d => color(d.data.label))\r\n          .attr('stroke', 'black')\r\n          .style('stroke-width', '2px')\r\n          .style('opacity', 0.7);\r\n      }\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  \r\n"],"mappings":";;EACSA,KAAK,EAAC;AAAiB;;uBAA5BC,mBAAA,CAAmC,OAAnCC,UAAmC"},"metadata":{},"sourceType":"module","externalDependencies":[]}