{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","_createElementBlock","_hoisted_1"],"sources":["C:\\Users\\jabri\\Desktop\\expense-tracker2\\src\\components\\ChartComponent.vue"],"sourcesContent":["<template>\r\n    <div ref=\"chart\"></div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { db, auth } from '@/firebase.js';\r\n  import * as d3 from 'd3';\r\n  \r\n  export default {\r\n    name: 'ChartComponent',\r\n    data() {\r\n      return {\r\n        incomeTotal: 0,\r\n        expenseTotal: 0,\r\n      }\r\n    },\r\n    created() {\r\n      this.fetchIncomeTotal();\r\n      this.fetchExpenseTotal();\r\n    },\r\n    methods: {\r\n      fetchIncomeTotal() {\r\n        const userId = auth.currentUser.uid;\r\n        db.collection(`users/${userId}/income`).get()\r\n          .then((querySnapshot) => {\r\n            let total = 0;\r\n            querySnapshot.forEach((doc) => {\r\n              total += doc.data().amount;\r\n            });\r\n            this.incomeTotal = total;\r\n            this.renderChart();\r\n          })\r\n          .catch((error) => {\r\n            console.error('Error fetching income total:', error);\r\n          });\r\n      },\r\n      fetchExpenseTotal() {\r\n        const userId = auth.currentUser.uid;\r\n        db.collection(`users/${userId}/expenses`).get()\r\n          .then((querySnapshot) => {\r\n            let total = 0;\r\n            querySnapshot.forEach((doc) => {\r\n              total += doc.data().amount;\r\n            });\r\n            this.expenseTotal = total;\r\n            this.renderChart();\r\n          })\r\n          .catch((error) => {\r\n            console.error('Error fetching expense total:', error);\r\n          });\r\n      },\r\n      renderChart() {\r\n        // Get data for the pie chart\r\n        const data = [\r\n          { name: 'Income', value: this.incomeTotal },\r\n          { name: 'Expense', value: this.expenseTotal },\r\n        ];\r\n  \r\n        // Set up the pie chart dimensions\r\n        const width = 300;\r\n        const height = 300;\r\n        const radius = Math.min(width, height) / 2;\r\n  \r\n        // Set up the color scale for the chart\r\n        const color = d3.scaleOrdinal()\r\n          .range(['#98abc5', '#8a89a6']);\r\n  \r\n        // Create the pie chart\r\n        const pie = d3.pie()\r\n          .value((d) => d.value);\r\n  \r\n        const arc = d3.arc()\r\n          .innerRadius(0)\r\n          .outerRadius(radius);\r\n  \r\n        const svg = d3.select(this.$refs.chart)\r\n          .append('svg')\r\n          .attr('width', width)\r\n          .attr('height', height)\r\n          .append('g')\r\n          .attr('transform', `translate(${width / 2},${height / 2})`);\r\n  \r\n        const path = svg.selectAll('path')\r\n          .data(pie(data))\r\n          .enter()\r\n          .append('path')\r\n          .attr('d', arc)\r\n          .attr('fill', (d) => color(d.data.name));\r\n  \r\n        // Add text labels to the chart\r\n        const text = svg.selectAll('text')\r\n          .data(pie(data))\r\n          .enter()\r\n          .append('text')\r\n          .text((d) => `${d.data.name}: ${d.data.value}`)\r\n          .attr('transform', (d) => `translate(${arc.centroid(d)})`)\r\n          .attr('text-anchor', 'middle');\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  \r\n"],"mappings":";;EACSA,GAAG,EAAC;AAAO;;uBAAhBC,mBAAA,CAAuB,OAAvBC,UAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}