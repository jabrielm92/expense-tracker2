{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1"],"sources":["C:\\Users\\jabri\\Desktop\\expense-tracker2\\src\\components\\ChartComponent.vue"],"sourcesContent":["<template>\r\n    <div id=\"chart\"></div>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from 'd3';\r\nimport { db, auth } from '@/firebase.js';\r\n\r\nexport default {\r\n  name: 'ChartComponent',\r\n  data() {\r\n    return {\r\n      data: []\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchData();\r\n  },\r\n  methods: {\r\n    fetchData() {\r\n      const userId = auth.currentUser.uid;\r\n      let data = [];\r\n\r\n      db.collection(`users/${userId}/income`).get()\r\n        .then((querySnapshot) => {\r\n          querySnapshot.forEach((doc) => {\r\n            let transaction = doc.data();\r\n            transaction.id = doc.id;\r\n            transaction.type = 'income';\r\n            data.push(transaction);\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error fetching income transactions:', error);\r\n        });\r\n        \r\n      db.collection(`users/${userId}/expenses`).get()\r\n        .then((querySnapshot) => {\r\n          querySnapshot.forEach((doc) => {\r\n            let transaction = doc.data();\r\n            transaction.id = doc.id;\r\n            transaction.type = 'expense';\r\n            data.push(transaction);\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error fetching expense transactions:', error);\r\n        });\r\n\r\n      this.data = data;\r\n    },\r\n    drawChart() {\r\n      const width = 400;\r\n      const height = 400;\r\n      const radius = Math.min(width, height) / 2;\r\n\r\n      const svg = d3.select('#chart')\r\n        .append('svg')\r\n        .attr('width', width)\r\n        .attr('height', height)\r\n        .append('g')\r\n        .attr('transform', `translate(${width / 2}, ${height / 2})`);\r\n\r\n      const color = d3.scaleOrdinal()\r\n        .domain(['income', 'expense'])\r\n        .range(['#98abc5', '#8a89a6']);\r\n\r\n      const pie = d3.pie()\r\n        .value((d) => d.amount)\r\n        .sort(null);\r\n\r\n      const data = pie(this.data);\r\n\r\n      const arc = d3.arc()\r\n        .innerRadius(0)\r\n        .outerRadius(radius);\r\n\r\n      const path = svg.selectAll('path')\r\n        .data(data)\r\n        .enter()\r\n        .append('path')\r\n        .attr('d', arc)\r\n        .attr('fill', (d) => color(d.data.type));\r\n\r\n      const legend = svg.selectAll('.legend')\r\n        .data(color.domain())\r\n        .enter()\r\n        .append('g')\r\n        .attr('class', 'legend')\r\n        .attr('transform', (d, i) => `translate(${i * 100 - 50}, 200)`);\r\n\r\n      legend.append('rect')\r\n        .attr('x', 0)\r\n        .attr('y', 0)\r\n        .attr('width', 20)\r\n        .attr('height', 20)\r\n        .style('fill', color);\r\n\r\n      legend.append('text')\r\n        .attr('x', 30)\r\n        .attr('y', 15)\r\n        .text((d) => d);\r\n    }\r\n  },\r\n  mounted() {\r\n    this.drawChart();\r\n  }\r\n}\r\n</script>\r\n\r\n  \r\n  \r\n"],"mappings":";;EACSA,EAAE,EAAC;AAAO;;uBAAfC,mBAAA,CAAsB,OAAtBC,UAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}