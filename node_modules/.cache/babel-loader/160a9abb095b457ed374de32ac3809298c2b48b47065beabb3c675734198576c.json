{"ast":null,"code":"export default {\n  data() {\n    return {\n      expenses: [],\n      categories: [],\n      selectedCategory: \"\"\n    };\n  },\n  mounted() {\n    this.fetchExpenses();\n    this.fetchCategories();\n  },\n  methods: {\n    fetchExpenses() {\n      axios.get(\"/api/expenses\").then(response => {\n        this.expenses = response.data;\n      });\n    },\n    fetchCategories() {\n      axios.get(\"/api/categories\").then(response => {\n        this.categories = response.data;\n      });\n    },\n    getCategoryName(categoryId) {\n      const category = this.categories.find(category => category.id === categoryId);\n      return category ? category.name : \"\";\n    }\n  },\n  computed: {\n    filteredExpenses() {\n      return this.selectedCategory ? this.expenses.filter(expense => expense.category_id === parseInt(this.selectedCategory)) : this.expenses;\n    },\n    totalExpenses() {\n      return this.expenses.reduce((total, expense) => total + parseFloat(expense.amount), 0);\n    }\n  }\n};","map":{"version":3,"names":["data","expenses","categories","selectedCategory","mounted","fetchExpenses","fetchCategories","methods","axios","get","then","response","getCategoryName","categoryId","category","find","id","name","computed","filteredExpenses","filter","expense","category_id","parseInt","totalExpenses","reduce","total","parseFloat","amount"],"sources":["C:\\Users\\jabri\\Desktop\\expense-tracker2\\src\\views\\ViewExpenses.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <h2 class=\"text-center my-4\">View Expenses</h2>\r\n\r\n    <div class=\"row my-4\">\r\n      <div class=\"col-md-4 offset-md-4\">\r\n        <select class=\"form-control\" v-model=\"selectedCategory\">\r\n          <option value=\"\">All Categories</option>\r\n          <option v-for=\"category in categories\" :key=\"category.id\" :value=\"category.id\">{{ category.name }}</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-md-8 offset-md-2\">\r\n        <table class=\"table table-bordered\">\r\n          <thead>\r\n            <tr>\r\n              <th>Date</th>\r\n              <th>Description</th>\r\n              <th>Category</th>\r\n              <th>Amount</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-for=\"expense in filteredExpenses\" :key=\"expense.id\">\r\n              <td>{{ expense.date }}</td>\r\n              <td>{{ expense.description }}</td>\r\n              <td>{{ getCategoryName(expense.category_id) }}</td>\r\n              <td>{{ expense.amount }}</td>\r\n            </tr>\r\n          </tbody>\r\n          <tfoot>\r\n            <tr>\r\n              <th>Total:</th>\r\n              <th></th>\r\n              <th></th>\r\n              <th>{{ totalExpenses }}</th>\r\n            </tr>\r\n          </tfoot>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      expenses: [],\r\n      categories: [],\r\n      selectedCategory: \"\"\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchExpenses();\r\n    this.fetchCategories();\r\n  },\r\n  methods: {\r\n    fetchExpenses() {\r\n      axios.get(\"/api/expenses\").then(response => {\r\n        this.expenses = response.data;\r\n      });\r\n    },\r\n    fetchCategories() {\r\n      axios.get(\"/api/categories\").then(response => {\r\n        this.categories = response.data;\r\n      });\r\n    },\r\n    getCategoryName(categoryId) {\r\n      const category = this.categories.find(category => category.id === categoryId);\r\n      return category ? category.name : \"\";\r\n    }\r\n  },\r\n  computed: {\r\n    filteredExpenses() {\r\n      return this.selectedCategory\r\n        ? this.expenses.filter(expense => expense.category_id === parseInt(this.selectedCategory))\r\n        : this.expenses;\r\n    },\r\n    totalExpenses() {\r\n      return this.expenses.reduce((total, expense) => total + parseFloat(expense.amount), 0);\r\n    }\r\n  }\r\n};\r\n</script>\r\n"],"mappings":"AA+CA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE,EAAE;MACdC,gBAAgB,EAAE;IACpB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,aAAa,CAAC,CAAC;IACpB,IAAI,CAACC,eAAe,CAAC,CAAC;EACxB,CAAC;EACDC,OAAO,EAAE;IACPF,aAAaA,CAAA,EAAG;MACdG,KAAK,CAACC,GAAG,CAAC,eAAe,CAAC,CAACC,IAAI,CAACC,QAAO,IAAK;QAC1C,IAAI,CAACV,QAAO,GAAIU,QAAQ,CAACX,IAAI;MAC/B,CAAC,CAAC;IACJ,CAAC;IACDM,eAAeA,CAAA,EAAG;MAChBE,KAAK,CAACC,GAAG,CAAC,iBAAiB,CAAC,CAACC,IAAI,CAACC,QAAO,IAAK;QAC5C,IAAI,CAACT,UAAS,GAAIS,QAAQ,CAACX,IAAI;MACjC,CAAC,CAAC;IACJ,CAAC;IACDY,eAAeA,CAACC,UAAU,EAAE;MAC1B,MAAMC,QAAO,GAAI,IAAI,CAACZ,UAAU,CAACa,IAAI,CAACD,QAAO,IAAKA,QAAQ,CAACE,EAAC,KAAMH,UAAU,CAAC;MAC7E,OAAOC,QAAO,GAAIA,QAAQ,CAACG,IAAG,GAAI,EAAE;IACtC;EACF,CAAC;EACDC,QAAQ,EAAE;IACRC,gBAAgBA,CAAA,EAAG;MACjB,OAAO,IAAI,CAAChB,gBAAe,GACvB,IAAI,CAACF,QAAQ,CAACmB,MAAM,CAACC,OAAM,IAAKA,OAAO,CAACC,WAAU,KAAMC,QAAQ,CAAC,IAAI,CAACpB,gBAAgB,CAAC,IACvF,IAAI,CAACF,QAAQ;IACnB,CAAC;IACDuB,aAAaA,CAAA,EAAG;MACd,OAAO,IAAI,CAACvB,QAAQ,CAACwB,MAAM,CAAC,CAACC,KAAK,EAAEL,OAAO,KAAKK,KAAI,GAAIC,UAAU,CAACN,OAAO,CAACO,MAAM,CAAC,EAAE,CAAC,CAAC;IACxF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}