{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1"],"sources":["C:\\Users\\jabri\\Desktop\\expense-tracker2\\src\\components\\ChartComponent.vue"],"sourcesContent":["<template>\r\n    <div id=\"chart\"></div>\r\n  </template>\r\n  \r\n  <script>\r\n  import * as d3 from 'd3';\r\n  import { db, auth } from '@/firebase.js';\r\n  \r\n  export default {\r\n    name: 'ChartComponent',\r\n    data() {\r\n      return {\r\n        incomeTotal: 0,\r\n        expenseTotal: 0\r\n      };\r\n    },\r\n    created() {\r\n      this.fetchData();\r\n    },\r\n    methods: {\r\n      fetchData() {\r\n        const userId = auth.currentUser.uid;\r\n        db.collection(`users/${userId}/income`).get()\r\n          .then((querySnapshot) => {\r\n            let total = 0;\r\n            querySnapshot.forEach((doc) => {\r\n              total += doc.data().amount;\r\n            });\r\n            this.incomeTotal = total;\r\n            this.drawChart();\r\n          })\r\n          .catch((error) => {\r\n            console.error('Error fetching income total:', error);\r\n          });\r\n          \r\n        db.collection(`users/${userId}/expenses`).get()\r\n          .then((querySnapshot) => {\r\n            let total = 0;\r\n            querySnapshot.forEach((doc) => {\r\n              total += doc.data().amount;\r\n            });\r\n            this.expenseTotal = total;\r\n            this.drawChart();\r\n          })\r\n          .catch((error) => {\r\n            console.error('Error fetching expense total:', error);\r\n          });\r\n      },\r\n      drawChart() {\r\n        // only draw the chart when we have fetched both income and expense data\r\n        if (this.incomeTotal && this.expenseTotal) {\r\n          const data = [\r\n            { label: 'Income', value: this.incomeTotal },\r\n            { label: 'Expenses', value: this.expenseTotal }\r\n          ];\r\n          \r\n          const width = 300;\r\n          const height = 300;\r\n          const radius = Math.min(width, height) / 2;\r\n  \r\n          const svg = d3.select('#pie-chart')\r\n            .append('svg')\r\n            .attr('width', width)\r\n            .attr('height', height)\r\n            .append('g')\r\n            .attr('transform', `translate(${width / 2},${height / 2})`);\r\n  \r\n          const color = d3.scaleOrdinal()\r\n            .domain(data.map(d => d.label))\r\n            .range(['#5CB85C', '#D9534F']);\r\n  \r\n          const pie = d3.pie()\r\n            .sort(null)\r\n            .value(d => d.value);\r\n  \r\n          const path = d3.arc()\r\n            .outerRadius(radius - 10)\r\n            .innerRadius(0);\r\n  \r\n          const label = d3.arc()\r\n            .outerRadius(radius - 40)\r\n            .innerRadius(radius - 40);\r\n  \r\n          const arc = svg.selectAll('.arc')\r\n            .data(pie(data))\r\n            .enter()\r\n            .append('g')\r\n            .attr('class', 'arc');\r\n  \r\n          arc.append('path')\r\n            .attr('d', path)\r\n            .attr('fill', d => color(d.data.label));\r\n  \r\n          arc.append('text')\r\n            .attr('transform', d => `translate(${label.centroid(d)})`)\r\n            .attr('dy', '0.35em')\r\n            .text(d => d.data.label);\r\n        }\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n\r\n  \r\n  \r\n"],"mappings":";;EACSA,EAAE,EAAC;AAAO;;uBAAfC,mBAAA,CAAsB,OAAtBC,UAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}