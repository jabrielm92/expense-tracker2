{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_line_chart = _resolveComponent(\"line-chart\");\n  const _component_bar_chart = _resolveComponent(\"bar-chart\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_line_chart, {\n    data: $data.chartData,\n    options: $data.chartOptions\n  }, null, 8 /* PROPS */, [\"data\", \"options\"]), _createVNode(_component_bar_chart, {\n    data: $data.graphData,\n    options: $data.graphOptions\n  }, null, 8 /* PROPS */, [\"data\", \"options\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_line_chart","data","$data","chartData","options","chartOptions","_component_bar_chart","graphData","graphOptions"],"sources":["C:\\Users\\jabri\\Desktop\\expense-tracker2\\src\\components\\ChartComponent.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <line-chart :data=\"chartData\" :options=\"chartOptions\"></line-chart>\r\n      <bar-chart :data=\"graphData\" :options=\"graphOptions\"></bar-chart>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { Line, Bar } from 'vue-chartjs'\r\n  import { db, auth } from '@/firebase.js'\r\n  \r\n  export default {\r\n    name: 'ChartComponent',\r\n    components: {\r\n      LineChart: Line,\r\n      BarChart: Bar\r\n    },\r\n    data() {\r\n      return {\r\n        chartData: {\r\n          labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n          datasets: [\r\n            {\r\n              label: 'Income',\r\n              backgroundColor: '#3cba9f',\r\n              data: []\r\n            },\r\n            {\r\n              label: 'Expenses',\r\n              backgroundColor: '#c45850',\r\n              data: []\r\n            }\r\n          ]\r\n        },\r\n        chartOptions: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          scales: {\r\n            yAxes: [{\r\n              ticks: {\r\n                beginAtZero: true\r\n            }\r\n          }],\r\n          xAxes: [{\r\n            type: 'category',\r\n            labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul']\r\n          }]\r\n        }\r\n      },\r\n      graphData: {\r\n  datasets: [\r\n    {\r\n      label: 'Transactions',\r\n      backgroundColor: '#3e95cd',\r\n      data: []\r\n    }\r\n  ]\r\n},\r\n        graphOptions: {\r\n          responsive: true,\r\n          maintainAspectRatio: false\r\n        }\r\n      }\r\n    },\r\n    created() {\r\n      this.fetchChartData()\r\n      this.fetchGraphData()\r\n    },\r\n    methods: {\r\n        fetchChartData() {\r\n  const userId = auth.currentUser.uid;\r\n  db.collection(`users/${userId}/income`).get()\r\n    .then((querySnapshot) => {\r\n      let incomeData = []\r\n      querySnapshot.forEach((doc) => {\r\n        incomeData.push(doc.data().amount)\r\n      })\r\n      this.chartData.datasets[0].data = incomeData\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error fetching income data:', error)\r\n    })\r\n\r\n  db.collection(`users/${userId}/expenses`).get()\r\n    .then((querySnapshot) => {\r\n      let expenseData = []\r\n      querySnapshot.forEach((doc) => {\r\n        expenseData.push(doc.data().amount)\r\n      })\r\n      this.chartData.datasets[1].data = expenseData\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error fetching expense data:', error)\r\n    })\r\n},\r\nfetchGraphData() {\r\n  const userId = auth.currentUser.uid;\r\n  db.collection(`users/${userId}/transactions`).orderBy('date', 'desc').limit(5).get()\r\n    .then((querySnapshot) => {\r\n      let labels = []\r\n      let transactionData = []\r\n      querySnapshot.forEach((doc) => {\r\n        let transaction = doc.data()\r\n        labels.push(transaction.date)\r\n        transactionData.push(transaction.amount)\r\n      })\r\n      this.graphData.labels = labels\r\n      this.graphData.datasets[0].data = transactionData\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error fetching transaction data:', error)\r\n    })\r\n},\r\n    }\r\n  }\r\n  </script>\r\n  "],"mappings":";;;;uBACIA,mBAAA,CAGM,cAFJC,YAAA,CAAmEC,qBAAA;IAAtDC,IAAI,EAAEC,KAAA,CAAAC,SAAS;IAAGC,OAAO,EAAEF,KAAA,CAAAG;gDACxCN,YAAA,CAAiEO,oBAAA;IAArDL,IAAI,EAAEC,KAAA,CAAAK,SAAS;IAAGH,OAAO,EAAEF,KAAA,CAAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}