{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chart-container\"\n};\nconst _hoisted_2 = {\n  ref: \"svg\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(), _createElementBlock(\"svg\", _hoisted_2, null, 512 /* NEED_PATCH */))]);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1","_hoisted_2"],"sources":["C:\\Users\\jabri\\Desktop\\expense-tracker2\\src\\components\\ChartComponent.vue"],"sourcesContent":["<template>\r\n    <div class=\"chart-container\">\r\n      <svg ref=\"svg\"></svg>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import * as d3 from \"d3\";\r\n  import { db, auth } from '@/firebase.js';\r\n  \r\n  export default {\r\n    name: \"ChartComponent\",\r\n    data() {\r\n      return {\r\n        transactions: [],\r\n      };\r\n    },\r\n    mounted() {\r\n      this.fetchAllTransactions();\r\n    },\r\n    methods: {\r\n      fetchAllTransactions() {\r\n        const userId = auth.currentUser.uid;\r\n        db.collection(`users/${userId}/income`)\r\n          .get()\r\n          .then((querySnapshot) => {\r\n            querySnapshot.forEach((doc) => {\r\n              let transaction = doc.data();\r\n              transaction.id = doc.id;\r\n              transaction.type = \"income\";\r\n              this.transactions.push(transaction);\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error fetching income transactions:\", error);\r\n          });\r\n  \r\n        db.collection(`users/${userId}/expenses`)\r\n          .get()\r\n          .then((querySnapshot) => {\r\n            querySnapshot.forEach((doc) => {\r\n              let transaction = doc.data();\r\n              transaction.id = doc.id;\r\n              transaction.type = \"expense\";\r\n              this.transactions.push(transaction);\r\n            });\r\n            this.drawChart();\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error fetching expense transactions:\", error);\r\n          });\r\n      },\r\n      drawChart() {\r\n        // Calculate the total income and expense amounts\r\n        let incomeTotal = 0;\r\n        let expenseTotal = 0;\r\n        this.transactions.forEach((transaction) => {\r\n          if (transaction.type === \"income\") {\r\n            incomeTotal += transaction.amount;\r\n          } else if (transaction.type === \"expense\") {\r\n            expenseTotal += transaction.amount;\r\n          }\r\n        });\r\n  \r\n        // Create the data array for the pie chart\r\n        let data = [\r\n          { label: \"Income\", value: incomeTotal },\r\n          { label: \"Expenses\", value: expenseTotal },\r\n        ];\r\n  \r\n        // Set up the dimensions of the SVG container\r\n        const svg = d3.select(this.$refs.svg);\r\n        const width = svg.node().getBoundingClientRect().width;\r\n        const height = width;\r\n  \r\n        // Set up the pie chart layout\r\n        const pie = d3.pie().value((d) => d.value);\r\n  \r\n        // Set up the arc generator\r\n        const arc = d3.arc().innerRadius(0).outerRadius(width / 2);\r\n  \r\n        // Set up the color scale\r\n        const color = d3.scaleOrdinal().domain([\"Income\", \"Expenses\"]).range([\"#1f77b4\", \"#d62728\"]);\r\n  \r\n        // Create the pie chart\r\n        svg\r\n          .append(\"g\")\r\n          .attr(\"transform\", `translate(${width / 2}, ${height / 2})`)\r\n          .selectAll(\"path\")\r\n          .data(pie(data))\r\n          .join(\"path\")\r\n          .attr(\"d\", arc)\r\n          .attr(\"fill\", (d) => color(d.data.label))\r\n          .attr(\"stroke\", \"#fff\")\r\n          .attr(\"stroke-width\", \"2px\")\r\n          .attr(\"class\", \"chart-slice\");\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n"],"mappings":";;EACSA,KAAK,EAAC;AAAiB;;EACrBC,GAAG,EAAC;AAAK;;uBADhBC,mBAAA,CAEM,OAFNC,UAEM,I,cADJD,mBAAA,CAAqB,OAArBE,UAAqB,+B"},"metadata":{},"sourceType":"module","externalDependencies":[]}