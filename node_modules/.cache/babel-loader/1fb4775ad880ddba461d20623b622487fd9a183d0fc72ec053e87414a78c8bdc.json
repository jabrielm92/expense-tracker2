{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","_createElementBlock","_hoisted_1"],"sources":["C:\\Users\\jabri\\Desktop\\expense-tracker2\\src\\components\\ChartComponent.vue"],"sourcesContent":["<template>\r\n    <div ref=\"chart\"></div>\r\n  </template>\r\n  \r\n  <script>\r\n  import * as d3 from 'd3';\r\n  import { db, auth } from '@/firebase.js';\r\n  \r\n  export default {\r\n    name: 'ChartComponent',\r\n    mounted() {\r\n      this.fetchData();\r\n    },\r\n    methods: {\r\n      fetchData() {\r\n        const currentUser = auth.currentUser.uid;\r\n  \r\n        db.collection('income')\r\n          .where('userId', '==', currentUser.uid)\r\n          .get()\r\n          .then((querySnapshot) => {\r\n            const incomeTotal = querySnapshot.docs.reduce((total, doc) => {\r\n              return total + doc.data().amount;\r\n            }, 0);\r\n  \r\n            db.collection('expenses')\r\n              .where('userId', '==', currentUser.uid)\r\n              .get()\r\n              .then((querySnapshot) => {\r\n                const expenseTotal = querySnapshot.docs.reduce((total, doc) => {\r\n                  return total + doc.data().amount;\r\n                }, 0);\r\n  \r\n                this.drawChart(incomeTotal, expenseTotal);\r\n              });\r\n          })\r\n          .catch((error) => {\r\n            console.error('Error fetching data:', error);\r\n          });\r\n      },\r\n      drawChart(incomeTotal, expenseTotal) {\r\n        const data = [\r\n          { label: 'Income', value: incomeTotal },\r\n          { label: 'Expenses', value: expenseTotal },\r\n        ];\r\n  \r\n        const margin = { top: 10, right: 10, bottom: 10, left: 10 };\r\n        const width = 400 - margin.left - margin.right;\r\n        const height = 400 - margin.top - margin.bottom;\r\n        const radius = Math.min(width, height) / 2;\r\n  \r\n        const svg = d3.select(this.$refs.chart)\r\n          .append('svg')\r\n          .attr('width', width + margin.left + margin.right)\r\n          .attr('height', height + margin.top + margin.bottom)\r\n          .append('g')\r\n          .attr('transform', `translate(${width / 2},${height / 2})`);\r\n  \r\n        const color = d3.scaleOrdinal()\r\n          .domain(data.map((d) => d.label))\r\n          .range(['#4CAF50', '#F44336']);\r\n  \r\n        const pie = d3.pie()\r\n          .value((d) => d.value);\r\n  \r\n        const arc = d3.arc()\r\n          .innerRadius(0)\r\n          .outerRadius(radius);\r\n  \r\n        const arcs = svg.selectAll('arc')\r\n          .data(pie(data))\r\n          .enter()\r\n          .append('g')\r\n          .attr('class', 'arc');\r\n  \r\n        arcs.append('path')\r\n          .attr('fill', (d) => color(d.data.label))\r\n          .attr('d', arc);\r\n  \r\n        arcs.append('text')\r\n          .attr('transform', (d) => `translate(${arc.centroid(d)})`)\r\n          .attr('text-anchor', 'middle')\r\n          .attr('font-size', '1.5em')\r\n          .text((d) => d.data.label);\r\n      },\r\n    },\r\n  };\r\n</script>\r\n  \r\n"],"mappings":";;EACSA,GAAG,EAAC;AAAO;;uBAAhBC,mBAAA,CAAuB,OAAvBC,UAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}