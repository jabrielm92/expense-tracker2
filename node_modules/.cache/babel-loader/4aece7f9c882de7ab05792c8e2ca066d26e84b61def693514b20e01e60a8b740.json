{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport { auth } from '@/firebase.js';\nexport default {\n  name: 'DashboardPage',\n  data() {\n    return {\n      expenses: [],\n      income: []\n    };\n  },\n  computed: {\n    totalExpenses() {\n      return this.expenses.reduce((total, expense) => total + parseFloat(expense.amount), 0).toFixed(2);\n    },\n    totalIncome() {\n      return this.income.reduce((total, income) => total + parseFloat(income.amount), 0).toFixed(2);\n    },\n    recentTransactions() {\n      const transactions = [...this.expenses, ...this.income];\n      transactions.sort((a, b) => new Date(b.date) - new Date(a.date));\n      return transactions.slice(0, 5);\n    }\n  },\n  created() {\n    auth.onAuthStateChanged(user => {\n      if (user) {\n        // user is logged in\n        this.user = user;\n      } else {\n        // user is logged out\n        this.user = null;\n      }\n    });\n  },\n  methods: {\n    fetchExpenses(uid) {\n      const db = firebase.firestore();\n      db.collection('expenses').where('user_id', '==', uid).get().then(querySnapshot => {\n        const expenses = [];\n        querySnapshot.forEach(doc => {\n          expenses.push({\n            id: doc.id,\n            ...doc.data()\n          });\n        });\n        this.expenses = expenses;\n      }).catch(error => console.log(error));\n    },\n    fetchIncome(uid) {\n      const db = firebase.firestore();\n      db.collection('income').where('user_id', '==', uid).get().then(querySnapshot => {\n        const income = [];\n        querySnapshot.forEach(doc => {\n          income.push({\n            id: doc.id,\n            ...doc.data()\n          });\n        });\n        this.income = income;\n      }).catch(error => console.log(error));\n    }\n  }\n};","map":{"version":3,"names":["firebase","auth","name","data","expenses","income","computed","totalExpenses","reduce","total","expense","parseFloat","amount","toFixed","totalIncome","recentTransactions","transactions","sort","a","b","Date","date","slice","created","onAuthStateChanged","user","methods","fetchExpenses","uid","db","firestore","collection","where","get","then","querySnapshot","forEach","doc","push","id","catch","error","console","log","fetchIncome"],"sources":["C:\\Users\\jabri\\Desktop\\expense-tracker2\\src\\components\\DashboardPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <h1>Dashboard</h1>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-6\">\r\n        <div class=\"card mb-3\">\r\n          <div class=\"card-header\">Total Expenses</div>\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">${{ totalExpenses }}</h5>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-6\">\r\n        <div class=\"card mb-3\">\r\n          <div class=\"card-header\">Total Income</div>\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">${{ totalIncome }}</h5>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12\">\r\n        <div class=\"card mb-3\">\r\n          <div class=\"card-header\">Recent Transactions</div>\r\n          <div class=\"card-body\">\r\n            <table class=\"table\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Date</th>\r\n                  <th>Description</th>\r\n                  <th>Amount</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr v-for=\"transaction in recentTransactions\" :key=\"transaction.id\">\r\n                  <td>{{ transaction.date }}</td>\r\n                  <td>{{ transaction.description }}</td>\r\n                  <td>{{ transaction.amount }}</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\nimport { auth } from '@/firebase.js';\r\n\r\nexport default {\r\n  name: 'DashboardPage',\r\n  data() {\r\n    return {\r\n      expenses: [],\r\n      income: []\r\n    }\r\n  },\r\n  computed: {\r\n    totalExpenses() {\r\n      return this.expenses.reduce((total, expense) => total + parseFloat(expense.amount), 0).toFixed(2)\r\n    },\r\n    totalIncome() {\r\n      return this.income.reduce((total, income) => total + parseFloat(income.amount), 0).toFixed(2)\r\n    },\r\n    recentTransactions() {\r\n      const transactions = [...this.expenses, ...this.income]\r\n      transactions.sort((a, b) => new Date(b.date) - new Date(a.date))\r\n      return transactions.slice(0, 5)\r\n    }\r\n  },\r\n      created() {\r\n      auth.onAuthStateChanged((user) => {\r\n        if (user) {\r\n          // user is logged in\r\n          this.user = user;\r\n        } else {\r\n          // user is logged out\r\n          this.user = null;\r\n        }\r\n      });\r\n    },\r\n  methods: {\r\n    fetchExpenses(uid) {\r\n      const db = firebase.firestore()\r\n      db.collection('expenses').where('user_id', '==', uid).get()\r\n        .then(querySnapshot => {\r\n          const expenses = []\r\n          querySnapshot.forEach(doc => {\r\n            expenses.push({ id: doc.id, ...doc.data() })\r\n          })\r\n          this.expenses = expenses\r\n        })\r\n        .catch(error => console.log(error))\r\n    },\r\n    fetchIncome(uid) {\r\n      const db = firebase.firestore()\r\n      db.collection('income').where('user_id', '==', uid).get()\r\n        .then(querySnapshot => {\r\n          const income = []\r\n          querySnapshot.forEach(doc => {\r\n            income.push({ id: doc.id, ...doc.data() })\r\n          })\r\n          this.income = income\r\n        })\r\n        .catch(error => console.log(error))\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}